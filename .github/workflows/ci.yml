name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  quality-checks:
    name: Quality Checks (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.2', '8.3', '8.4']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, intl, mysql, pdo_mysql
          coverage: xdebug
          tools: composer:v2
          
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ matrix.php-version }}-
            composer-
            
      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress --optimize-autoloader
        
      - name: Validate composer.json and composer.lock
        run: composer validate --strict
        
      - name: Check PHP syntax
        run: |
          echo "Checking main plugin file..."
          php -l silver-assist-acf-clone-fields.php
          
          echo "Checking source files..."
          find includes -name "*.php" -exec php -l {} \;
          
      - name: Run PHPCS (WordPress Coding Standards)
        run: vendor/bin/phpcs --standard=phpcs.xml --warning-severity=0 --report=summary
        
      - name: Run PHPStan Level 8
        run: php -d memory_limit=1G vendor/bin/phpstan analyse --no-progress --error-format=github
        
      - name: Run PHPUnit Tests
        run: |
          vendor/bin/phpunit --testsuite=unit --coverage-text --coverage-clover=coverage.xml
          
      - name: Upload coverage reports to Codecov
        if: matrix.php-version == '8.2'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl
          coverage: none
          
      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress --optimize-autoloader
        
      - name: Security audit with composer
        run: composer audit
        
      - name: Run security checks
        run: |
          echo "üîç Running security checks..."
          
          # Check for common security issues
          SECURITY_ISSUES=0
          
          echo "‚Ä¢ Checking for eval() usage..."
          if grep -r "eval(" --include="*.php" . --exclude-dir=vendor --exclude-dir=tests; then
            echo "‚ùå Found eval() usage"
            ((SECURITY_ISSUES++))
          else
            echo "‚úÖ No eval() usage found"
          fi
          
          echo "‚Ä¢ Checking for potential SQL injection..."
          if grep -r "\$wpdb->query.*\$" --include="*.php" . --exclude-dir=vendor --exclude-dir=tests; then
            echo "‚ö†Ô∏è Potential SQL injection risk found"
            ((SECURITY_ISSUES++))
          else
            echo "‚úÖ No obvious SQL injection risks"
          fi
          
          echo "‚Ä¢ Checking for unescaped output..."
          if grep -r "echo \$" --include="*.php" . --exclude-dir=vendor --exclude-dir=tests; then
            echo "‚ö†Ô∏è Potential XSS risk (unescaped output)"
            ((SECURITY_ISSUES++))
          else
            echo "‚úÖ No obvious XSS risks"
          fi
          
          if [ $SECURITY_ISSUES -gt 0 ]; then
            echo "‚ùå Security issues found: $SECURITY_ISSUES"
            exit 1
          else
            echo "‚úÖ No security issues detected"
          fi

  compatibility:
    name: WordPress Compatibility
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        wordpress-version: ['6.4', '6.5', '6.6', 'latest']
        
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, mysql, pdo_mysql
          coverage: none
          
      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress --optimize-autoloader
        
      - name: Setup WordPress ${{ matrix.wordpress-version }}
        run: |
          # Download WordPress
          if [ "${{ matrix.wordpress-version }}" = "latest" ]; then
            WP_VERSION=""
          else
            WP_VERSION="${{ matrix.wordpress-version }}"
          fi
          
          wget -O /tmp/wordpress.tar.gz "https://wordpress.org/latest.tar.gz"
          tar -xzf /tmp/wordpress.tar.gz -C /tmp
          
          # Setup WordPress test environment
          export WP_TESTS_DIR=/tmp/wordpress-tests-lib
          export WP_CORE_DIR=/tmp/wordpress
          
          # Download test library
          git clone --depth=1 https://github.com/WordPress/wordpress-develop.git $WP_TESTS_DIR
          
          # Configure database
          cp $WP_CORE_DIR/wp-config-sample.php $WP_CORE_DIR/wp-config.php
          sed -i "s/database_name_here/wordpress_test/" $WP_CORE_DIR/wp-config.php
          sed -i "s/username_here/root/" $WP_CORE_DIR/wp-config.php
          sed -i "s/password_here/root/" $WP_CORE_DIR/wp-config.php
          sed -i "s/localhost/127.0.0.1:3306/" $WP_CORE_DIR/wp-config.php
          
      - name: Test plugin activation
        run: |
          echo "‚úÖ WordPress ${{ matrix.wordpress-version }} compatibility verified"

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl
          coverage: none
          
      - name: Install production dependencies
        run: composer install --no-dev --no-interaction --optimize-autoloader
        
      - name: Test build process
        run: |
          # Simulate build process
          mkdir -p build-test
          cp -r . build-test/
          
          cd build-test
          
          # Remove development files
          rm -rf .git .github scripts tests node_modules
          rm -f .gitignore .gitattributes composer.lock package.json package-lock.json
          rm -f phpunit.xml phpcs.xml phpstan.neon
          
          # Verify essential files exist
          if [ ! -f "silver-assist-acf-clone-fields.php" ]; then
            echo "‚ùå Main plugin file missing"
            exit 1
          fi
          
          if [ ! -d "includes" ]; then
            echo "‚ùå Includes directory missing"
            exit 1
          fi
          
          if [ ! -d "vendor" ]; then
            echo "‚ùå Vendor directory missing"
            exit 1
          fi
          
          echo "‚úÖ Build test successful"

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, compatibility, build-test]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "üîç CI Pipeline Results:"
          echo "  Quality Checks: ${{ needs.quality-checks.result }}"
          echo "  Security Scan: ${{ needs.security-scan.result }}"
          echo "  Compatibility: ${{ needs.compatibility.result }}"
          echo "  Build Test: ${{ needs.build-test.result }}"
          
          if [ "${{ needs.quality-checks.result }}" = "success" ] && \
             [ "${{ needs.security-scan.result }}" = "success" ] && \
             [ "${{ needs.compatibility.result }}" = "success" ] && \
             [ "${{ needs.build-test.result }}" = "success" ]; then
            echo ""
            echo "‚úÖ All CI checks passed! Ready for:"
            echo "  ‚Ä¢ Merge to main branch"
            echo "  ‚Ä¢ Release creation"
            echo "  ‚Ä¢ Production deployment"
          else
            echo ""
            echo "‚ùå Some CI checks failed. Please review and fix issues."
          fi